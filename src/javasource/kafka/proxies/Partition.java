// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package kafka.proxies;

public class Partition
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject partitionMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Kafka.Partition";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Identifier("Identifier"),
		BeginOffset("BeginOffset"),
		EndOffset("EndOffset"),
		Position("Position"),
		Partition_Topic("Kafka.Partition_Topic");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Partition(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "Kafka.Partition"));
	}

	protected Partition(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject partitionMendixObject)
	{
		if (partitionMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("Kafka.Partition", partitionMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a Kafka.Partition");

		this.partitionMendixObject = partitionMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Partition.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static kafka.proxies.Partition initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return kafka.proxies.Partition.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static kafka.proxies.Partition initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new kafka.proxies.Partition(context, mendixObject);
	}

	public static kafka.proxies.Partition load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return kafka.proxies.Partition.initialize(context, mendixObject);
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Identifier
	 */
	public final java.lang.Integer getIdentifier()
	{
		return getIdentifier(getContext());
	}

	/**
	 * @param context
	 * @return value of Identifier
	 */
	public final java.lang.Integer getIdentifier(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.Identifier.toString());
	}

	/**
	 * Set value of Identifier
	 * @param identifier
	 */
	public final void setIdentifier(java.lang.Integer identifier)
	{
		setIdentifier(getContext(), identifier);
	}

	/**
	 * Set value of Identifier
	 * @param context
	 * @param identifier
	 */
	public final void setIdentifier(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer identifier)
	{
		getMendixObject().setValue(context, MemberNames.Identifier.toString(), identifier);
	}

	/**
	 * @return value of BeginOffset
	 */
	public final java.lang.Long getBeginOffset()
	{
		return getBeginOffset(getContext());
	}

	/**
	 * @param context
	 * @return value of BeginOffset
	 */
	public final java.lang.Long getBeginOffset(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Long) getMendixObject().getValue(context, MemberNames.BeginOffset.toString());
	}

	/**
	 * Set value of BeginOffset
	 * @param beginoffset
	 */
	public final void setBeginOffset(java.lang.Long beginoffset)
	{
		setBeginOffset(getContext(), beginoffset);
	}

	/**
	 * Set value of BeginOffset
	 * @param context
	 * @param beginoffset
	 */
	public final void setBeginOffset(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Long beginoffset)
	{
		getMendixObject().setValue(context, MemberNames.BeginOffset.toString(), beginoffset);
	}

	/**
	 * @return value of EndOffset
	 */
	public final java.lang.Long getEndOffset()
	{
		return getEndOffset(getContext());
	}

	/**
	 * @param context
	 * @return value of EndOffset
	 */
	public final java.lang.Long getEndOffset(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Long) getMendixObject().getValue(context, MemberNames.EndOffset.toString());
	}

	/**
	 * Set value of EndOffset
	 * @param endoffset
	 */
	public final void setEndOffset(java.lang.Long endoffset)
	{
		setEndOffset(getContext(), endoffset);
	}

	/**
	 * Set value of EndOffset
	 * @param context
	 * @param endoffset
	 */
	public final void setEndOffset(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Long endoffset)
	{
		getMendixObject().setValue(context, MemberNames.EndOffset.toString(), endoffset);
	}

	/**
	 * @return value of Position
	 */
	public final java.lang.Long getPosition()
	{
		return getPosition(getContext());
	}

	/**
	 * @param context
	 * @return value of Position
	 */
	public final java.lang.Long getPosition(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Long) getMendixObject().getValue(context, MemberNames.Position.toString());
	}

	/**
	 * Set value of Position
	 * @param position
	 */
	public final void setPosition(java.lang.Long position)
	{
		setPosition(getContext(), position);
	}

	/**
	 * Set value of Position
	 * @param context
	 * @param position
	 */
	public final void setPosition(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Long position)
	{
		getMendixObject().setValue(context, MemberNames.Position.toString(), position);
	}

	/**
	 * @return value of Partition_Topic
	 */
	public final kafka.proxies.Topic getPartition_Topic() throws com.mendix.core.CoreException
	{
		return getPartition_Topic(getContext());
	}

	/**
	 * @param context
	 * @return value of Partition_Topic
	 */
	public final kafka.proxies.Topic getPartition_Topic(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		kafka.proxies.Topic result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Partition_Topic.toString());
		if (identifier != null)
			result = kafka.proxies.Topic.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Partition_Topic
	 * @param partition_topic
	 */
	public final void setPartition_Topic(kafka.proxies.Topic partition_topic)
	{
		setPartition_Topic(getContext(), partition_topic);
	}

	/**
	 * Set value of Partition_Topic
	 * @param context
	 * @param partition_topic
	 */
	public final void setPartition_Topic(com.mendix.systemwideinterfaces.core.IContext context, kafka.proxies.Topic partition_topic)
	{
		if (partition_topic == null)
			getMendixObject().setValue(context, MemberNames.Partition_Topic.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Partition_Topic.toString(), partition_topic.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return partitionMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final kafka.proxies.Partition that = (kafka.proxies.Partition) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "Kafka.Partition";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
