// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package kafka.proxies;

public class Publisher
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject publisherMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Kafka.Publisher";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Topic("Topic"),
		Key("Key"),
		Payload("Payload"),
		Publisher_Producer("Kafka.Publisher_Producer"),
		Publisher_Server("Kafka.Publisher_Server");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Publisher(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "Kafka.Publisher"));
	}

	protected Publisher(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject publisherMendixObject)
	{
		if (publisherMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("Kafka.Publisher", publisherMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a Kafka.Publisher");

		this.publisherMendixObject = publisherMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Publisher.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static kafka.proxies.Publisher initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return kafka.proxies.Publisher.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static kafka.proxies.Publisher initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new kafka.proxies.Publisher(context, mendixObject);
	}

	public static kafka.proxies.Publisher load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return kafka.proxies.Publisher.initialize(context, mendixObject);
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Topic
	 */
	public final java.lang.String getTopic()
	{
		return getTopic(getContext());
	}

	/**
	 * @param context
	 * @return value of Topic
	 */
	public final java.lang.String getTopic(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Topic.toString());
	}

	/**
	 * Set value of Topic
	 * @param topic
	 */
	public final void setTopic(java.lang.String topic)
	{
		setTopic(getContext(), topic);
	}

	/**
	 * Set value of Topic
	 * @param context
	 * @param topic
	 */
	public final void setTopic(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String topic)
	{
		getMendixObject().setValue(context, MemberNames.Topic.toString(), topic);
	}

	/**
	 * @return value of Key
	 */
	public final java.lang.String getKey()
	{
		return getKey(getContext());
	}

	/**
	 * @param context
	 * @return value of Key
	 */
	public final java.lang.String getKey(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Key.toString());
	}

	/**
	 * Set value of Key
	 * @param key
	 */
	public final void setKey(java.lang.String key)
	{
		setKey(getContext(), key);
	}

	/**
	 * Set value of Key
	 * @param context
	 * @param key
	 */
	public final void setKey(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String key)
	{
		getMendixObject().setValue(context, MemberNames.Key.toString(), key);
	}

	/**
	 * @return value of Payload
	 */
	public final java.lang.String getPayload()
	{
		return getPayload(getContext());
	}

	/**
	 * @param context
	 * @return value of Payload
	 */
	public final java.lang.String getPayload(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Payload.toString());
	}

	/**
	 * Set value of Payload
	 * @param payload
	 */
	public final void setPayload(java.lang.String payload)
	{
		setPayload(getContext(), payload);
	}

	/**
	 * Set value of Payload
	 * @param context
	 * @param payload
	 */
	public final void setPayload(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String payload)
	{
		getMendixObject().setValue(context, MemberNames.Payload.toString(), payload);
	}

	/**
	 * @return value of Publisher_Producer
	 */
	public final kafka.proxies.Producer getPublisher_Producer() throws com.mendix.core.CoreException
	{
		return getPublisher_Producer(getContext());
	}

	/**
	 * @param context
	 * @return value of Publisher_Producer
	 */
	public final kafka.proxies.Producer getPublisher_Producer(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		kafka.proxies.Producer result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Publisher_Producer.toString());
		if (identifier != null)
			result = kafka.proxies.Producer.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Publisher_Producer
	 * @param publisher_producer
	 */
	public final void setPublisher_Producer(kafka.proxies.Producer publisher_producer)
	{
		setPublisher_Producer(getContext(), publisher_producer);
	}

	/**
	 * Set value of Publisher_Producer
	 * @param context
	 * @param publisher_producer
	 */
	public final void setPublisher_Producer(com.mendix.systemwideinterfaces.core.IContext context, kafka.proxies.Producer publisher_producer)
	{
		if (publisher_producer == null)
			getMendixObject().setValue(context, MemberNames.Publisher_Producer.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Publisher_Producer.toString(), publisher_producer.getMendixObject().getId());
	}

	/**
	 * @return value of Publisher_Server
	 */
	public final kafka.proxies.Server getPublisher_Server() throws com.mendix.core.CoreException
	{
		return getPublisher_Server(getContext());
	}

	/**
	 * @param context
	 * @return value of Publisher_Server
	 */
	public final kafka.proxies.Server getPublisher_Server(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		kafka.proxies.Server result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Publisher_Server.toString());
		if (identifier != null)
			result = kafka.proxies.Server.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Publisher_Server
	 * @param publisher_server
	 */
	public final void setPublisher_Server(kafka.proxies.Server publisher_server)
	{
		setPublisher_Server(getContext(), publisher_server);
	}

	/**
	 * Set value of Publisher_Server
	 * @param context
	 * @param publisher_server
	 */
	public final void setPublisher_Server(com.mendix.systemwideinterfaces.core.IContext context, kafka.proxies.Server publisher_server)
	{
		if (publisher_server == null)
			getMendixObject().setValue(context, MemberNames.Publisher_Server.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Publisher_Server.toString(), publisher_server.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return publisherMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final kafka.proxies.Publisher that = (kafka.proxies.Publisher) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "Kafka.Publisher";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
