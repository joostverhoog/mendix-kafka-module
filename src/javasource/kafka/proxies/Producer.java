// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package kafka.proxies;

public class Producer
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject producerMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Kafka.Producer";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Enabled("Enabled"),
		Reference("Reference"),
		Name("Name"),
		Producer_ProducerConfig("Kafka.Producer_ProducerConfig"),
		Producer_Server("Kafka.Producer_Server");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Producer(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "Kafka.Producer"));
	}

	protected Producer(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject producerMendixObject)
	{
		if (producerMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("Kafka.Producer", producerMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a Kafka.Producer");

		this.producerMendixObject = producerMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Producer.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static kafka.proxies.Producer initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return kafka.proxies.Producer.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static kafka.proxies.Producer initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new kafka.proxies.Producer(context, mendixObject);
	}

	public static kafka.proxies.Producer load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return kafka.proxies.Producer.initialize(context, mendixObject);
	}

	public static java.util.List<kafka.proxies.Producer> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<kafka.proxies.Producer> result = new java.util.ArrayList<kafka.proxies.Producer>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//Kafka.Producer" + xpathConstraint))
			result.add(kafka.proxies.Producer.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Enabled
	 */
	public final java.lang.Boolean getEnabled()
	{
		return getEnabled(getContext());
	}

	/**
	 * @param context
	 * @return value of Enabled
	 */
	public final java.lang.Boolean getEnabled(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.Enabled.toString());
	}

	/**
	 * Set value of Enabled
	 * @param enabled
	 */
	public final void setEnabled(java.lang.Boolean enabled)
	{
		setEnabled(getContext(), enabled);
	}

	/**
	 * Set value of Enabled
	 * @param context
	 * @param enabled
	 */
	public final void setEnabled(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean enabled)
	{
		getMendixObject().setValue(context, MemberNames.Enabled.toString(), enabled);
	}

	/**
	 * @return value of Reference
	 */
	public final java.lang.Long getReference()
	{
		return getReference(getContext());
	}

	/**
	 * @param context
	 * @return value of Reference
	 */
	public final java.lang.Long getReference(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Long) getMendixObject().getValue(context, MemberNames.Reference.toString());
	}

	/**
	 * Set value of Reference
	 * @param reference
	 */
	public final void setReference(java.lang.Long reference)
	{
		setReference(getContext(), reference);
	}

	/**
	 * Set value of Reference
	 * @param context
	 * @param reference
	 */
	public final void setReference(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Long reference)
	{
		getMendixObject().setValue(context, MemberNames.Reference.toString(), reference);
	}

	/**
	 * @return value of Name
	 */
	public final java.lang.String getName()
	{
		return getName(getContext());
	}

	/**
	 * @param context
	 * @return value of Name
	 */
	public final java.lang.String getName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Name.toString());
	}

	/**
	 * Set value of Name
	 * @param name
	 */
	public final void setName(java.lang.String name)
	{
		setName(getContext(), name);
	}

	/**
	 * Set value of Name
	 * @param context
	 * @param name
	 */
	public final void setName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String name)
	{
		getMendixObject().setValue(context, MemberNames.Name.toString(), name);
	}

	/**
	 * @return value of Producer_ProducerConfig
	 */
	public final kafka.proxies.ProducerConfig getProducer_ProducerConfig() throws com.mendix.core.CoreException
	{
		return getProducer_ProducerConfig(getContext());
	}

	/**
	 * @param context
	 * @return value of Producer_ProducerConfig
	 */
	public final kafka.proxies.ProducerConfig getProducer_ProducerConfig(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		kafka.proxies.ProducerConfig result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Producer_ProducerConfig.toString());
		if (identifier != null)
			result = kafka.proxies.ProducerConfig.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Producer_ProducerConfig
	 * @param producer_producerconfig
	 */
	public final void setProducer_ProducerConfig(kafka.proxies.ProducerConfig producer_producerconfig)
	{
		setProducer_ProducerConfig(getContext(), producer_producerconfig);
	}

	/**
	 * Set value of Producer_ProducerConfig
	 * @param context
	 * @param producer_producerconfig
	 */
	public final void setProducer_ProducerConfig(com.mendix.systemwideinterfaces.core.IContext context, kafka.proxies.ProducerConfig producer_producerconfig)
	{
		if (producer_producerconfig == null)
			getMendixObject().setValue(context, MemberNames.Producer_ProducerConfig.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Producer_ProducerConfig.toString(), producer_producerconfig.getMendixObject().getId());
	}

	/**
	 * @return value of Producer_Server
	 */
	public final kafka.proxies.Server getProducer_Server() throws com.mendix.core.CoreException
	{
		return getProducer_Server(getContext());
	}

	/**
	 * @param context
	 * @return value of Producer_Server
	 */
	public final kafka.proxies.Server getProducer_Server(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		kafka.proxies.Server result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Producer_Server.toString());
		if (identifier != null)
			result = kafka.proxies.Server.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Producer_Server
	 * @param producer_server
	 */
	public final void setProducer_Server(kafka.proxies.Server producer_server)
	{
		setProducer_Server(getContext(), producer_server);
	}

	/**
	 * Set value of Producer_Server
	 * @param context
	 * @param producer_server
	 */
	public final void setProducer_Server(com.mendix.systemwideinterfaces.core.IContext context, kafka.proxies.Server producer_server)
	{
		if (producer_server == null)
			getMendixObject().setValue(context, MemberNames.Producer_Server.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Producer_Server.toString(), producer_server.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return producerMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final kafka.proxies.Producer that = (kafka.proxies.Producer) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "Kafka.Producer";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
